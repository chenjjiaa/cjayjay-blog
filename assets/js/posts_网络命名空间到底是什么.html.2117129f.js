"use strict";(self.webpackChunkcjayjay_blog=self.webpackChunkcjayjay_blog||[]).push([[905],{6262:(s,n)=>{n.A=(s,n)=>{const e=s.__vccOpts||s;for(const[s,i]of n)e[s]=i;return e}},1941:(s,n,e)=>{e.r(n),e.d(n,{comp:()=>t,data:()=>p});var i=e(641),a=e(33);const l={},t=(0,e(6262).A)(l,[["render",function(s,n){const e=(0,i.g2)("VPCard");return(0,i.uX)(),(0,i.CE)("div",null,[(0,i.Q3)(" more "),n[0]||(n[0]=(0,i.Fv)('<h1 id="网络命名空间到底是什么" tabindex="-1"><a class="header-anchor" href="#网络命名空间到底是什么"><span>网络命名空间到底是什么？</span></a></h1><h2 id="命名空间是什么" tabindex="-1"><a class="header-anchor" href="#命名空间是什么"><span>命名空间是什么？</span></a></h2><p>在 Linux 系统中，Namespace 是一种机制，用来隔离内核的资源。而 Network Namespace 允许<strong>防火墙、网卡、路由表、邻居表、协议栈</strong>等相互隔离在不同的命名空间中，从而实现网络资源的隔离。</p><p>不管是虚拟机还是容器，当运行在独立的命名空间时，就像是一台单独的物理主机。由于每个容器都有自己的网络服务, 在 Network namespace 的作用下，这就使得一个主机内运行两个同时监听 80 端口的 Nginx 服务成为可能（当然，外部访问还需宿主机 NAT，如VMware 的 NAT）</p><p>Linux 系统其实提供了 8 种资源的隔离：Cgroup、IPC、Network、Mount、PID、User、UTS、Time</p><h2 id="k8s-创建的命名空间" tabindex="-1"><a class="header-anchor" href="#k8s-创建的命名空间"><span>K8s 创建的命名空间</span></a></h2><p>在部署了 K8s 的 Node 节点上（宿主机），我们可以在 <code>/var/run/netns</code> 目录下看到一系列的网络命名空间</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cjj@cjj-workspace ~&gt; ll /var/run/netns</span></span>\n<span class="line"><span>total 0</span></span>\n<span class="line"><span>-r--r--r-- 1 root root 0 Aug  1 17:34 cni-00942302-xxxx-xxxx-xxxx-f08a053fd4db</span></span>\n<span class="line"><span>-r--r--r-- 1 root root 0 Aug  1 17:38 cni-01bdd4ae-xxxx-xxxx-xxxx-69f34e7f1b0a</span></span>\n<span class="line"><span>-r--r--r-- 1 root root 0 Aug  1 17:34 cni-0276affe-xxxx-xxxx-xxxx-13034821084b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但 <code>/var/run/netns</code> 目录下的这一系列网络命名空间，并不是真正的 Network Namespace（后续简称 netns）的存储位置，Namespace 实际上是在内核中。Linux 内核为方便管理，将 netns 挂载到了这个目录下而已。Linux 内核为每一个 netns <strong>维护了一组隔离的网络资源</strong>，这些资源在内核的数据结构中存储</p><p>也就是说，netns 是一种内核级别的抽象，而不是一个用户空间中的文件或目录。网络命名空间所管理的资源是<strong>不能通过文件系统来访问到</strong>的</p><p>当我们使用 <code>ip netns add my-ns-01</code> 时，会创建一个关于网络命名空间的数据结构来存储这个命名空间的相关信息，为了方便用户管理，Linux 还会在 <code>/var/run/netns</code> 目录下创建一个符号链接，这个链接指向了内核中的此 Namespace，意思是这个目录下的符号链接只是一个便于用户访问的入口而已</p><h2 id="network-namespace-实践" tabindex="-1"><a class="header-anchor" href="#network-namespace-实践"><span>Network Namespace 实践</span></a></h2><p>我们可以通过 Linux 的 ip 工具的子命令 netns 来对 Network Namespace 进行增删改查</p><p>创建新的 netns。当我们用 <code>ip</code> 命令创建 netns 时，会在 <code>/var/run/netns</code> 生成一个挂载点</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sudo ip netns add aaa-netns-01</span></span>\n<span class="line"><span>ll /var/run/netns | head -n 5</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># output:</span></span>\n<span class="line"><span>cjj@cjj-workspace ~&gt; ll /var/run/netns | head -n 5</span></span>\n<span class="line"><span>total 0home/cjj</span></span>\n<span class="line"><span>-r--r--r-- 1 root root 0 Aug 13 01:10 aaa-netns-01</span></span>\n<span class="line"><span>-r--r--r-- 1 root root 0 Aug  1 17:34 cni-00942302-xxxx-xxxx-xxxx-f08a053fd4db</span></span>\n<span class="line"><span>-r--r--r-- 1 root root 0 Aug  1 17:38 cni-01bdd4ae-xxxx-xxxx-xxxx-69f34e7f1b0a</span></span>\n<span class="line"><span>-r--r--r-- 1 root root 0 Aug  1 17:34 cni-0276affe-xxxx-xxxx-xxxx-13034821084b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询该命名空间基本信息，由于没有进行任何配置，该命名空间下就只有一块状态为 DOWN 的本地回环设备 <code>lo</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sudo ip netns exec aaa-netns-01 ip a</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># output:</span></span>\n<span class="line"><span>cjj@cjj-workspace ~&gt; sudo ip netns exec aaa-netns-01 ip a</span></span>\n<span class="line"><span>1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span></span>\n<span class="line"><span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继续查看该命名空间下的 iptables 规则配置，由于是一个初始化的命名空间，所以也没有任何规则在里面</p><blockquote><ul><li>-L 表示查看当前表的所有规则，默认查看的是 filter 表，如果要查看 nat 表，可以加上 -t nat 参数</li><li>-n 表示不对 IP 地址进行反查，加上这个参数显示速度将会加快</li><li>-v 表示输出详细信息，包含通过该规则的数据包数量、总字节数以及相应的网络接口</li></ul></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sudo ip netns exec aaa-netns-01 iptables -L -n</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># output:</span></span>\n<span class="line"><span>cjj@cjj-workspace ~&gt; sudo ip netns exec aaa-netns-01 iptables -L -n</span></span>\n<span class="line"><span>Chain INPUT (policy ACCEPT)</span></span>\n<span class="line"><span>target     prot opt source               destination</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Chain FORWARD (policy ACCEPT)</span></span>\n<span class="line"><span>target     prot opt source               destination</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Chain OUTPUT (policy ACCEPT)</span></span>\n<span class="line"><span>target     prot opt source               destination</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：新建的 Namespace 其实就相当于是一台裸机（因为与宿主机的 Namespace 隔离了），所以 Namespace 和 Namespace 之间并不能直接相互通信。如果想让他们通信，就得在 “裸机” 上添加虚拟网卡（veth）、并连接到交换机（bridge），如同我们两台物理机配置一个局域网一样，做好了这些配置，才能相互通信</p><h2 id="验证-inode-是否相同" tabindex="-1"><a class="header-anchor" href="#验证-inode-是否相同"><span>验证 inode 是否相同</span></a></h2><p>我们看看 <code>/proc/&lt;pid&gt;/ns</code> 下的 net 命名空间，与 <code>/var/run/netns</code> 下的 netns 的 inode 是否一致？因为 inode 是内核的一个标识，一样则是同一个入口</p><p>先用 <code>lsns</code> 命令拿出该命名空间的 PID</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>lsns</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># output:</span></span>\n<span class="line"><span>cjj@cjj-workspace ~&gt; lsns</span></span>\n<span class="line"><span>        NS  TYPE   NPROCS     PID USER        COMMAND</span></span>\n<span class="line"><span>4026531835  cgroup     50     598 cjj \t\t/lib/systemd/systemd --user</span></span>\n<span class="line"><span>4026531837  user       50     598 cjj \t\t/lib/systemd/systemd --user</span></span>\n<span class="line"><span>......</span></span>\n<span class="line"><span>4026544674  net        15 1266123 cjj \t\tbash</span></span>\n<span class="line"><span>4026545229  uts        15 1266123 cjj \t\tbash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 PID 查出 netns：<code>ip netns identify &lt;pid&gt;</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ip netns identify 1266123</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># output:</span></span>\n<span class="line"><span>cjj@cjj-workspace ~&gt; ip netns identify 1266123</span></span>\n<span class="line"><span>cni-2180b3ea-73e3-5960-40a5-0e5f792f7530</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比 inode 值</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ll /proc/1266123/ns</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># output:</span></span>\n<span class="line"><span>cjj@cjj-workspace ~&gt; ll /proc/1266123/ns</span></span>\n<span class="line"><span>total 0</span></span>\n<span class="line"><span>lrwxrwxrwx 1 cjj cjj 0 Aug 12 01:13 cgroup -&gt; &#39;cgroup:[4026531835]&#39;</span></span>\n<span class="line"><span>lrwxrwxrwx 1 cjj cjj 0 Aug 12 01:13 ipc -&gt; &#39;ipc:[4026545230]&#39;</span></span>\n<span class="line"><span>lrwxrwxrwx 1 cjj cjj 0 Aug 12 01:13 mnt -&gt; &#39;mnt:[4026545234]&#39;</span></span>\n<span class="line"><span>lrwxrwxrwx 1 cjj cjj 0 Aug 12 01:12 net -&gt; &#39;net:[4026544674]&#39;</span></span>\n<span class="line"><span>lrwxrwxrwx 1 cjj cjj 0 Aug 11 19:00 pid -&gt; &#39;pid:[4026545235]&#39;</span></span>\n<span class="line"><span>lrwxrwxrwx 1 cjj cjj 0 Aug 13 01:35 pid_for_children -&gt; &#39;pid:[4026545235]&#39;</span></span>\n<span class="line"><span>lrwxrwxrwx 1 cjj cjj 0 Aug 12 01:13 user -&gt; &#39;user:[4026531837]&#39;</span></span>\n<span class="line"><span>lrwxrwxrwx 1 cjj cjj 0 Aug 12 01:13 uts -&gt; &#39;uts:[4026545229]&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ll -i /var/run/netns | grep cni-2180b3ea-73e3-5960-40a5-0e5f792f7530</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># output:</span></span>\n<span class="line"><span>cjj@cjj-workspace ~&gt; ll -i /var/run/netns | grep cni-2180b3ea-73e3-5960-40a5-0e5f792f7530</span></span>\n<span class="line"><span>4026544674 -r--r--r-- 1 root root 0 Aug  2 14:04 cni-2180b3ea-73e3-5960-40a5-0e5f792f7530</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现 inode 都是 <code>4026544674</code> 这个值，证明他们是同一个命名空间，同一个符号引用标识</p><h2 id="netns-隔离机制内核实现" tabindex="-1"><a class="header-anchor" href="#netns-隔离机制内核实现"><span>Netns 隔离机制内核实现</span></a></h2><blockquote><p>前文提及：Linux 内核为每一个 netns 维护了一组隔离的网络资源，<strong>这些资源在内核的数据结构中存储</strong></p></blockquote><p>那在这里我们可以进一步看看，是通过哪些数据结构来实现，这些在内核的数据结构到底是什么，比如用什么结构体来表示</p><h3 id="net" tabindex="-1"><a class="header-anchor" href="#net"><span>net</span></a></h3><p><code>include/net/net_namespace.h</code></p><p><a href="https://github.com/torvalds/linux/blob/master/include/net/net_namespace.h" target="_blank" rel="noopener noreferrer">net 结构体源码链接</a></p><p>网络系统在初始化的时候，会初始化一个初始网络命名空间，即 <code>init_net</code> 命名空间（也是一个 net 结构体）。后续创建的 netns 都会和 <code>init_net</code> 像链表一样串起来。并且每一个网络设备都对应一个命名空间，同一个命名空间下的网络设备通过 <code>dev_base_head </code> 串起来</p><p>net 结构体包含了各种网络资源的指针，比如网络设备、路由表、套接字、IP 地址、Netfilter 表（iptables）、连接跟踪表等</p><h3 id="net-device" tabindex="-1"><a class="header-anchor" href="#net-device"><span>net_device</span></a></h3><p><a href="https://github.com/torvalds/linux/blob/master/include/linux/netdevice.h" target="_blank" rel="noopener noreferrer">net_device 结构体源码链接</a></p><p>这是 Linux 内核中用于表示网络接口的结构体。每个网络接口都由一个 <code>net_device</code> 实例表示。</p><p>当你在一个命名空间中创建或配置网络接口时，内核会将这个接口与该命名空间绑定。操作这个接口的任何网络操作（如发送、接收数据包）都会局限在这个命名空间内部，其他命名空间无法访问或影响这个接口</p><p><code>net</code> 与 <code>net_device</code> 的关联关系：<code>net</code> 中包含有 <code>net_device</code> 结构体的链表字段，而通过 <code>net_device</code> 找到 <code>net</code> 可以通过以下方式</p><p>可通过此字段来查找网络设备对应的命名空间</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@nd_net:\t\tNetwork namespace this network device is inside</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> net </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dev_net</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> net_device </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">dev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\treturn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read_pnet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">nd_net</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>网络设备通常是在驱动初始化时或显式创建时被注册到命名空间的。这个注册过程会将 net_device 添加到当前命名空间的设备链表中</p><p><a href="https://github.com/torvalds/linux/blob/master/net/core/dev.c" target="_blank" rel="noopener noreferrer">register_netdevice 函数实现</a></p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> register_netdevice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> net_device </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">dev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t......</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由表隔离" tabindex="-1"><a class="header-anchor" href="#路由表隔离"><span>路由表隔离</span></a></h3><p>路由表相关的数据通常通过 <code>struct netns_ipv4</code> 和 <code>struct netns_ipv6</code> 结构体进行管理，这些结构体包含了与 IPv4 和 IPv6 相关的路由信息，这样每个网络命名空间就可以有自己的 IPv4 和 IPv6 路由表</p><h3 id="套接字-sockets-隔离" tabindex="-1"><a class="header-anchor" href="#套接字-sockets-隔离"><span>套接字（Sockets）隔离</span></a></h3><p>每个 netns 有自己独立的套接字空间。</p><p>sock 结构体：Linux 内核使用 sock 结构体来表示一个网络连接的套接字。这个结构体中包含一个指向 net 结构体的指针，指向该套接字所属的 netns</p><p>隔离机制：当一个进程创建套接字时，内核会根据进程当前所在的 netns，初始化套接字的命名空间指针。这意味着该套接字只能在该命名空间内通信，无法跨命名空间传输数据。</p><h3 id="netfilter-和防火墙规则隔离" tabindex="-1"><a class="header-anchor" href="#netfilter-和防火墙规则隔离"><span>Netfilter 和防火墙规则隔离</span></a></h3><p>Netfilter 是 Linux 内核中用于处理网络数据包的框架，iptables 是它在用户空间工具</p><p><code>nf_conntrack</code> ：这是内核用于连接跟踪的结构体，每个 netns 都有独立的连接跟踪表，用于跟踪在该命名空间内建立的连接</p><p>隔离机制：每个 netns 有自己独立的 Netfilter 表和规则集。这些规则集也存储在对应的 net 结构体中，确保不同命名空间中的防火墙规则彼此隔离</p><p><code>nf_conntrack</code> 是 Netfilter 框架的一部分，用于连接跟踪（Connection Tracking），即跟踪通过网络的数据流状态</p><p><code>nf_conntrack</code> 也不是直接存储在 <code>struct net</code> 中。连接跟踪表通常由 <code>struct netns_ct</code> 来管理，<code>netns_ct</code> 是一个包含连接跟踪相关数据的结构体</p><p><code>struct netns_ct</code> 也是 <code>struct net</code> 的成员，通过它，网络命名空间可以拥有独立的连接跟踪表，确保每个命名空间的连接状态是独立的，不会互相干扰</p><h3 id="系统调用和命名空间" tabindex="-1"><a class="header-anchor" href="#系统调用和命名空间"><span>系统调用和命名空间</span></a></h3><p>系统调用是用户空间和内核空间交互的接口。当涉及网络资源的系统调用（如 <code>socket()</code>、<code>bind()</code>、<code>connect()</code> 等）被调用时，内核会根据进程当前的 netns 上下文来决定操作的目标资源。</p><p><code>task_struct</code> 结构体：每个进程在内核中都对应一个 <code>task_struct</code> 结构体。这个结构体中包含一个指向 <code>nsproxy</code> 结构体的指针，<code>nsproxy</code> 中包含了该进程所属的各类命名空间（包括 netns）</p><p>上下文切换：当进程执行网络操作时，内核会通过 <code>task_struct</code> --&gt; <code>nsproxy</code> --&gt; <code>net</code> 的路径找到进程所属的网络命名空间，并在该命名空间的上下文中执行网络操作</p>',67)),(0,i.bF)(e,(0,a._B)((0,i.Ng)({title:"chenjjiaa",desc:"沉浸在万花筒的幻术之中吧...",logo:"./github-logo.jpg",link:"https://github.com/chenjjiaa",background:"rgba(253, 230, 138, 0.15)"})),null,16)])}]]),p=JSON.parse('{"path":"/posts/%E7%BD%91%E7%BB%9C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88.html","title":"网络命名空间是什么？网络虚拟化浅析","lang":"zh-CN","frontmatter":{"title":"网络命名空间是什么？网络虚拟化浅析","cover":"./祢豆子1.jpg","date":"2024-08-13T00:00:00.000Z","category":["计算机基础"],"tag":["后端","kubernetes"],"star":true,"sticky":1000,"excerpt":"<p>在 Linux 系统中，Namespace 是一种机制，用来隔离内核的资源。而 Network Namespace 允许防火墙、网卡、路由表、邻居表、协议栈等相互隔离在不同的命名空间中，从而实现网络资源的隔离。</p>"},"headers":[{"level":2,"title":"命名空间是什么？","slug":"命名空间是什么","link":"#命名空间是什么","children":[]},{"level":2,"title":"K8s 创建的命名空间","slug":"k8s-创建的命名空间","link":"#k8s-创建的命名空间","children":[]},{"level":2,"title":"Network Namespace 实践","slug":"network-namespace-实践","link":"#network-namespace-实践","children":[]},{"level":2,"title":"验证 inode 是否相同","slug":"验证-inode-是否相同","link":"#验证-inode-是否相同","children":[]},{"level":2,"title":"Netns 隔离机制内核实现","slug":"netns-隔离机制内核实现","link":"#netns-隔离机制内核实现","children":[{"level":3,"title":"net","slug":"net","link":"#net","children":[]},{"level":3,"title":"net_device","slug":"net-device","link":"#net-device","children":[]},{"level":3,"title":"路由表隔离","slug":"路由表隔离","link":"#路由表隔离","children":[]},{"level":3,"title":"套接字（Sockets）隔离","slug":"套接字-sockets-隔离","link":"#套接字-sockets-隔离","children":[]},{"level":3,"title":"Netfilter 和防火墙规则隔离","slug":"netfilter-和防火墙规则隔离","link":"#netfilter-和防火墙规则隔离","children":[]},{"level":3,"title":"系统调用和命名空间","slug":"系统调用和命名空间","link":"#系统调用和命名空间","children":[]}]}],"git":{"createdTime":1727023492000,"updatedTime":1727105565000,"contributors":[{"name":"chenjjiaa","email":"chenjjiaa@qq.com","commits":1},{"name":"励志买套上海苏河湾大平层","email":"94773058+chenjjiaa@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.2,"words":2759},"filePathRelative":"posts/网络命名空间到底是什么.md","localizedDate":"2024年8月13日"}')}}]);